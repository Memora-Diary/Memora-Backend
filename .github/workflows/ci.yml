name: CI Pipeline

# Trigger the workflow on push of tags
on:
  push:
    tags:
      - '*'  # This triggers the workflow for any tag push

# Define global environment variables
env:
  AWS_REGION: eu-west-1
  AWS_ECR_REGISTRY: 654654475781.dkr.ecr.eu-west-1.amazonaws.com
  IMAGE_NAME: 654654475781.dkr.ecr.eu-west-1.amazonaws.com/memora-api
  APP: memora
  PROD_URL: https://memoraapi.bitnata.com
  ANSIBLE_CONFIG: ${{ github.workspace }}/pipeline/ansible.cfg

jobs:
  lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (version 4-alpine equivalent)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '4'  # Note: Node.js v4 is deprecated. Consider updating.

      # Step 3: Install dockerlint globally
      - name: Install dockerlint
        run: |
          npm install -g dockerlint
          npm cache clean --force

      # Step 4: Lint Dockerfiles
      - name: Lint Dockerfiles
        run: |
          find backend/t4g-server/ -name Dockerfile -exec dockerlint {} \;

  publish-prod:
    name: Publish Docker Image to ECR (Production)
    runs-on: ubuntu-latest
    needs: lint  # Ensures this job runs after the lint job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (optional but recommended for advanced Docker features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to AWS ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 4: Describe or create the ECR repository
      - name: Describe or Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names memora-api || \
          aws ecr create-repository --repository-name memora-api
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 5: Retrieve AWS Secrets and store in .env file
      - name: Retrieve AWS Secrets
        run: |
          aws secretsmanager get-secret-value --secret-id prod-${{ env.APP }}-env --query SecretString --output text > $GITHUB_WORKSPACE/.env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 6: Build the Docker image with BuildKit
      - name: Build Docker Image
        run: |
          DOCKER_BUILDKIT=1 docker build -t ${{ env.IMAGE_NAME }}:${GITHUB_REF##*/}-prod $GITHUB_WORKSPACE

      # Step 7: Push the Docker image to ECR
      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${GITHUB_REF##*/}-prod
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: publish-prod  # Ensures this job runs after the publish-prod job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up environment variables
      - name: Set up Environment Variables
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "PIPELINE_DIR=${{ github.workspace }}/pipeline" >> $GITHUB_ENV
          echo "APP_DIR=~/memora" >> $GITHUB_ENV

      # Step 3: Make the deploy script executable
      - name: Make Deploy Script Executable
        run: chmod +x ${{ env.PIPELINE_DIR }}/deploy-gitlab.sh

      # Step 4: Run the deploy script
      - name: Run Deploy Script
        run: ${{ env.PIPELINE_DIR }}/deploy-gitlab.sh
        env:
          ENVIRONMENT: prod
          APP_DIR: ~/memora
          PROD_URL: ${{ env.PROD_URL }}
          ANSIBLE_CONFIG: ${{ env.ANSIBLE_CONFIG }}

      # Step 5: Set GitHub Environment (optional)
      - name: Set Environment
        uses: actions/create-environment@v1
        with:
          name: production
          url: ${{ env.PROD_URL }}
